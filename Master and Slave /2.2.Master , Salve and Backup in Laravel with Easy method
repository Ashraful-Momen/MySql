# IN Laravel  Need to clear the Master and Slave Concept pretty much all : 
----------------------------------------------------------------
1. Order table for order crud operation . 
2. Need Order 2 replica , when master down then Order_slave_1 work if master and order_slave_1 down then order_slave_2 will be work . Use One Class with easy implementation
3. Need order backup for order_backup_slave after order create, update or delete.  Try to use simple and one class for better understanding code 
4. Need auto load balance with ease method . when master update then auto order_salves will update as like mysql_cluster.  also use one class and try to use less method , code must be more understandable and easy . Don't use laravel default behaviour like create , update , delete for master and other for slave like this . use specific db with specific model .
===================================================================
=>laravel project => Config/database.php
-----------------------------------------
'connections' => [
    'orders_master' => [
        'driver' => 'mysql',
        'host' => env('DB_MASTER_HOST'),
        'database' => 'orders',
        // other connection settings
    ],
    'orders_slave_1' => [
        'driver' => 'mysql',
        'host' => env('DB_SLAVE1_HOST'),
        'database' => 'orders',
        // other connection settings
    ],
    'orders_slave_2' => [
        'driver' => 'mysql',
        'host' => env('DB_SLAVE2_HOST'),
        'database' => 'orders',
        // other connection settings
    ],
    'orders_backup' => [
        'driver' => 'mysql',
        'host' => env('DB_BACKUP_HOST'),
        'database' => 'orders',
        // other connection settings
    ],
]
===================================================================
class OrderController extends Controller
{
    private $orderService;

    public function __construct(OrderReplicationService $orderService)
    {
        $this->orderService = $orderService;
    }

    public function store(Request $request)
    {
        $orderId = $this->orderService->createOrder($request->validated());
        return response()->json(['id' => $orderId]);
    }

    public function update(Request $request, $id)
    {
        $this->orderService->updateOrder($id, $request->validated());
        return response()->json(['success' => true]);
    }

    public function destroy($id)
    {
        $this->orderService->deleteOrder($id);
        return response()->json(['success' => true]);
    }

    public function show($id)
    {
        $order = $this->orderService->getOrder($id);
        return response()->json($order);
    }
}
===================================================================
<?php

namespace App\Services;

use Illuminate\Support\Facades\DB;
use App\Models\Order;
use Exception;
use Illuminate\Support\Facades\Log;

class OrderReplicationService
{
    private $databases = [
        'master' => 'orders_master',
        'slave1' => 'orders_slave_1',
        'slave2' => 'orders_slave_2',
        'backup' => 'orders_backup'
    ];
    
    private $currentDB = 'master';
    
    /**
     * Check database connection and switch if needed
     */
    private function ensureConnection()
    {
        try {
            DB::connection($this->databases[$this->currentDB])->getPdo();
        } catch (Exception $e) {
            $this->failover();
        }
    }

    /**
     * Implement failover logic
     */
    private function failover()
    {
        $failoverOrder = ['master', 'slave1', 'slave2'];
        $currentIndex = array_search($this->currentDB, $failoverOrder);
        
        for ($i = $currentIndex + 1; $i < count($failoverOrder); $i++) {
            try {
                DB::connection($this->databases[$failoverOrder[$i]])->getPdo();
                $this->currentDB = $failoverOrder[$i];
                Log::info("Failover to " . $this->currentDB);
                return;
            } catch (Exception $e) {
                continue;
            }
        }
        
        throw new Exception("All database connections failed");
    }

    /**
     * Sync data across replicas
     */
    private function syncReplicas($data, $operation, $id = null)
    {
        $replicas = ['slave1', 'slave2', 'backup'];
        
        foreach ($replicas as $replica) {
            try {
                $connection = DB::connection($this->databases[$replica]);
                
                switch ($operation) {
                    case 'create':
                        $connection->table('orders')->insert($data);
                        break;
                    case 'update':
                        $connection->table('orders')->where('id', $id)->update($data);
                        break;
                    case 'delete':
                        $connection->table('orders')->where('id', $id)->delete();
                        break;
                }
            } catch (Exception $e) {
                Log::error("Sync failed for {$replica}: " . $e->getMessage());
            }
        }
    }

    /**
     * Create new order
     */
    public function createOrder(array $data)
    {
        $this->ensureConnection();
        
        try {
            // Create in master
            $connection = DB::connection($this->databases[$this->currentDB]);
            $orderId = $connection->table('orders')->insertGetId($data);
            
            // Sync with replicas
            $this->syncReplicas($data, 'create');
            
            return $orderId;
        } catch (Exception $e) {
            Log::error("Order creation failed: " . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Update existing order
     */
    public function updateOrder($id, array $data)
    {
        $this->ensureConnection();
        
        try {
            // Update in master
            $connection = DB::connection($this->databases[$this->currentDB]);
            $connection->table('orders')->where('id', $id)->update($data);
            
            // Sync with replicas
            $this->syncReplicas($data, 'update', $id);
            
            return true;
        } catch (Exception $e) {
            Log::error("Order update failed: " . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Delete order
     */
    public function deleteOrder($id)
    {
        $this->ensureConnection();
        
        try {
            // Delete from master
            $connection = DB::connection($this->databases[$this->currentDB]);
            $connection->table('orders')->where('id', $id)->delete();
            
            // Sync with replicas
            $this->syncReplicas([], 'delete', $id);
            
            return true;
        } catch (Exception $e) {
            Log::error("Order deletion failed: " . $e->getMessage());
            throw $e;
        }
    }

    /**
     * Get order with load balancing
     */
    public function getOrder($id)
    {
        $this->ensureConnection();
        
        // Simple round-robin load balancing between slaves
        static $currentSlave = 0;
        $slaves = ['slave1', 'slave2'];
        
        try {
            $connection = DB::connection($this->databases[$slaves[$currentSlave]]);
            $currentSlave = ($currentSlave + 1) % count($slaves);
            
            return $connection->table('orders')->find($id);
        } catch (Exception $e) {
            // If slave fails, try master
            Log::warning("Slave read failed, falling back to master");
            return DB::connection($this->databases['master'])
                     ->table('orders')
                     ->find($id);
        }
    }
}
================================================================================
Key features of this implementation:

Automatic Failover: If the master database fails, it automatically switches to slave1, and if that fails, to slave2.
Load Balancing: Read operations are automatically load balanced between the two slave databases using a simple round-robin approach.
Backup Synchronization: All operations are automatically synced to the backup database.
Single Class: Everything is contained in one service class for simplicity and maintainability.
Error Handling: Comprehensive error handling with logging for debugging and monitoring.
Database Agnostic: The implementation works with any database system supported by Laravel.

To add more advanced features, you could:

Add a health check method to periodically verify database connections
Implement more sophisticated load balancing algorithms
Add retry mechanisms for failed synchronizations
Add queue support for asynchronous replica updates
