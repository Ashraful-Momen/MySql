#DataBase Sharding : 
----------------------
# Database Sharding: A Comprehensive Guide

## 1. What is Database Sharding?

Database sharding is a database architecture pattern related to horizontal partitioning â€” the practice of separating one table's rows into multiple different tables, known as partitions or shards. Each shard has the same schema and columns, but entirely different rows.

```
Before Sharding:
+------------------+
|    Database      |
|  +------------+  |
|  | User Data  |  |
|  |------------|  |
|  | ID: 1      |  |
|  | ID: 2      |  |
|  | ID: 3      |  |
|  | ID: 4      |  |
|  | ID: 5      |  |
|  +------------+  |
+------------------+

After Sharding:
+------------------+     +------------------+     +------------------+
|    Shard 1       |     |    Shard 2       |     |    Shard 3       |
|  +------------+  |     |  +------------+  |     |  +------------+  |
|  | User Data  |  |     |  | User Data  |  |     |  | User Data  |  |
|  |------------|  |     |  |------------|  |     |  |------------|  |
|  | ID: 1      |  |     |  | ID: 3      |  |     |  | ID: 5      |  |
|  | ID: 2      |  |     |  | ID: 4      |  |     |  | ID: 6      |  |
|  +------------+  |     |  +------------+  |     |  +------------+  |
+------------------+     +------------------+     +------------------+
```

## 2. Sharding Architectures

### 2.1 Key-Based Sharding

Also known as hash-based sharding, this approach applies a hash function to a key attribute to determine the shard location.

```
                     Hash Function
                    +-----------+
User ID: 123456 --> | SHA-256  | --> Shard 2
                    +-----------+

+------------------+     +------------------+     +------------------+
|    Shard 1       |     |    Shard 2       |     |    Shard 3       |
| (Hash Range:     |     | (Hash Range:     |     | (Hash Range:     |
|  0000-3333)      |     |  3334-6666)      |     |  6667-9999)      |
+------------------+     +------------------+     +------------------+
```

### 2.2 Range-Based Sharding

Data is distributed based on ranges of a key value.

```
Customer ID Ranges:
+------------------+     +------------------+     +------------------+
|    Shard 1       |     |    Shard 2       |     |    Shard 3       |
| (ID: 1-1000)     |     | (ID: 1001-2000)  |     | (ID: 2001-3000)  |
+------------------+     +------------------+     +------------------+
```

### 2.3 Directory-Based Sharding

Uses a lookup table to track where data can be found.

```
+----------------------+
|    Lookup Service    |
|----------------------|
| Key Range | Shard ID |
|----------|----------|
| 1-1000   | Shard 1  |
| 1001-2000| Shard 2  |
| 2001-3000| Shard 3  |
+----------------------+
        |
        v
+------------------+     +------------------+     +------------------+
|    Shard 1       |     |    Shard 2       |     |    Shard 3       |
+------------------+     +------------------+     +------------------+
```

## 3. Shard Components

### 3.1 Basic Architecture
```
+------------------------+
|     Application        |
+------------------------+
           |
+------------------------+
|     Shard Manager      |
+------------------------+
           |
     +-----------+-----------+
     |           |           |
+--------+   +--------+   +--------+
|Shard 1 |   |Shard 2 |   |Shard 3 |
+--------+   +--------+   +--------+
```

### 3.2 Detailed Shard Structure
```
+----------------------------------+
|              Shard               |
|----------------------------------|
| - Partition Key                  |
| - Primary Data                   |
| - Indexes                        |
| - Configuration                  |
| - Replication Information        |
+----------------------------------+
```

## 4. Advantages and Challenges

### Advantages:
```
+-------------------+     +-------------------+     +-------------------+
|   Scalability     |     |   Performance     |     |   Availability    |
|-------------------|     |-------------------|     |-------------------|
| - Horizontal      |     | - Parallel       |     | - Fault          |
|   Growth          |     |   Processing     |     |   Tolerance      |
| - Better Resource |     | - Reduced        |     | - Geographic     |
|   Distribution    |     |   Contention     |     |   Distribution   |
+-------------------+     +-------------------+     +-------------------+
```

### Challenges:
```
+-------------------+     +-------------------+     +-------------------+
|   Complexity      |     |   Joins          |     |   Maintenance     |
|-------------------|     |-------------------|     |-------------------|
| - Setup          |     | - Cross-Shard    |     | - Backup         |
| - Management     |     |   Queries        |     | - Monitoring     |
| - Debugging      |     | - Consistency    |     | - Rebalancing    |
+-------------------+     +-------------------+     +-------------------+
```

## 5. Implementation Example

```
Application Layer:
+------------------------+
|    Your Application    |
+------------------------+
           |
           v
+------------------------+
|    Sharding Layer      |
|------------------------|
| - Shard Manager        |
| - Query Router         |
| - Configuration        |
+------------------------+
           |
     +-----------+-----------+
     v           v           v
+--------+   +--------+   +--------+
|Database|   |Database|   |Database|
|Shard 1 |   |Shard 2 |   |Shard 3 |
+--------+   +--------+   +--------+
```

## 6. Best Practices

1. Choose the right shard key
```
Good Shard Keys:
+------------------+
| - User ID        |
| - Company ID     |
| - Country Code   |
| - Date Ranges    |
+------------------+

Poor Shard Keys:
+------------------+
| - Sequential IDs |
| - Timestamps     |
| - Random Values  |
+------------------+
```

2. Monitor shard distribution
```
+-----------------+
| Shard Monitor   |
|-----------------|
| Shard 1: 33%    |
| Shard 2: 35%    |
| Shard 3: 32%    |
+-----------------+
```

3. Plan for rebalancing
```
Before Rebalancing:
+----------+    +----------+
| Shard 1  |    | Shard 2  |
| 70% Full |    | 30% Full |
+----------+    +----------+

During Rebalancing:
+----------+    +----------+
| Shard 1  | >> | Shard 2  |
| 55% Full |    | 45% Full |
+----------+    +----------+

After Rebalancing:
+----------+    +----------+
| Shard 1  |    | Shard 2  |
| 50% Full |    | 50% Full |
+----------+    +----------+
```

## 7. Common Scenarios

### 7.1 Global Application with Geographic Sharding
```
+-------------+     +-------------+     +-------------+
| US Shard    |     | EU Shard    |     | ASIA Shard  |
|-------------|     |-------------|     |-------------|
| US Users    |     | EU Users    |     | ASIA Users  |
| US Data     |     | EU Data     |     | ASIA Data   |
+-------------+     +-------------+     +-------------+
```

### 7.2 Multi-tenant Application
```
+-------------+     +-------------+     +-------------+
| Tenant 1-100|     |Tenant 101-200|    |Tenant 201-300|
|-------------|     |-------------|     |-------------|
| Data        |     | Data        |     | Data        |
| Config      |     | Config      |     | Config      |
| Users       |     | Users       |     | Users       |
+-------------+     +-------------+     +-------------+
```
