#Mysql Command====================================================================================


#Select=========================================================================================
*** select column_name form table_name where conditioin
#read data : ----------------------
>>> SELECT column1, column2, ...
FROM table_name; 

#read all data form table : --------
>>> SELECT * FROM table_name; 

#distict (unique all value ) : 
>>> SELECT DISTINCT Country FROM Customers;

#counts and returns the number of different (distinct) countries in the "Customers" table:
>>>SELECT COUNT(DISTINCT Country) FROM Customers;



#Where=========================================================================================
*** select column_name form table_name where conditioin

>>>SELECT column1, column2, ...
FROM table_name
WHERE condition; 

>>>SELECT * FROM Customers
WHERE Country = 'Mexico'; 

# AND, OR and NOT====================================================================================
The MySQL AND, OR and NOT Operators


#and -------------
>>> SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...; 

>>>SELECT * FROM Customers
WHERE Country = 'Germany' AND City = 'Berlin';

#or -------------
>>>SELECT column1, column2, ...
FROM table_name
WHERE condition1 OR condition2 OR condition3 ...; 

>>>SELECT * FROM Customers
WHERE City = 'Berlin' OR City = 'Stuttgart';

#not ----------------
>>>SELECT column1, column2, ...
FROM table_name
WHERE NOT condition; 

>>>SELECT * FROM Customers
WHERE NOT Country = 'Germany';

#example : ---------------------------------
>>>SELECT * FROM Customers
WHERE Country = 'Germany' AND (City = 'Berlin' OR City = 'Stuttgart'); 

#Order By=========================================================================================
The ORDER BY keyword is used to sort the result-set in ascending or descending order.

>>>SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC; 

>>>SELECT * FROM Customers
ORDER BY Country DESC; 

>>>SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC; 

#Insert Into======================================================================================
>>>INSERT INTO table_name (column1, column2, column3, ...)
VALUES (value1, value2, value3, ...); 

>>>INSERT INTO Customers (CustomerName, ContactName, Address, City, PostalCode, Country)
VALUES ('Cardinal', 'Tom B. Erichsen', 'Skagen 21', 'Stavanger', '4006', 'Norway');

#Is Null / Is not Null ===========================================================================
>>>We will have to use the IS NULL and IS NOT NULL operators instead.

>>>SELECT column_names
FROM table_name
WHERE column_name IS NULL;

>>>SELECT column_names
FROM table_name
WHERE column_name IS NOT NULL; 

>>>SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

#Update:   =======================================================================================
>>>UPDATE table_name
SET column1 = value1, column2 = value2, ...
WHERE condition; 

>>>UPDATE Customers
SET ContactName = 'Alfred Schmidt', City = 'Frankfurt'
WHERE CustomerID = 1;

#update all record (col) : --------------
>>>UPDATE Customers
SET PostalCode = 00000;


#Update:   =======================================================================================
>>>DELETE FROM table_name WHERE condition;

>>>UPDATE Customers
SET ContactName = 'Alfred Schmidt', City = 'Frankfurt'
WHERE CustomerID = 1;


>>>DELETE FROM Customers WHERE CustomerName='Alfreds Futterkiste';

#full table delete : ----------------
>>>DELETE FROM Customers;


#Limit:  =========================================================================================
The LIMIT clause is used to specify the number of records to return.

The LIMIT clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

>>>SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number; 

>>> SELECT * FROM Customers
LIMIT 3; 

>>>SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3; 



#Aggregate========================================================================================

#min(): -------------------
>>>SELECT MIN(column_name)
FROM table_name
WHERE condition; 

>>>SELECT MIN(Price) AS SmallestPrice
FROM Products;

#max():--------------------
>>>SELECT MAX(column_name)
FROM table_name
WHERE condition; 

>>>SELECT MAX(Price) AS LargestPrice
FROM Products; 

#count():------------------
>>>SELECT COUNT(column_name)
FROM table_name
WHERE condition; 

>>>SELECT COUNT(ProductID)
FROM Products;

#avg():-----------
>>>SELECT AVG(column_name)
FROM table_name
WHERE condition; 

>>>SELECT AVG(Price)
FROM Products;

#sum():-----------
>>>SELECT SUM(column_name)
FROM table_name
WHERE condition; 

>>>SELECT SUM(Quantity)
FROM OrderDetails; 

#like():----------
>>>SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern; 

The following SQL statement selects all customers with a CustomerName starting with "a":
>>>SELECT * FROM Customers
WHERE CustomerName LIKE 'a%'; 

The following SQL statement selects all customers with a CustomerName ending with "a":
>>>SELECT * FROM Customers
WHERE CustomerName LIKE '%a';

The following SQL statement selects all customers with a CustomerName that have "or" in any position:
>>>SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';

The following SQL statement selects all customers with a CustomerName that have "r" in the second position:
>>>SELECT * FROM Customers
WHERE CustomerName LIKE '_r%';


The following SQL statement selects all customers with a CustomerName that starts with "a" and are at least 3 characters in length:
>>>SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%'; 

The following SQL statement selects all customers with a ContactName that starts with "a" and ends with "o":
>>>SELECT * FROM Customers
WHERE ContactName LIKE 'a%o'; 

The following SQL statement selects all customers with a CustomerName that does NOT start with "a":
>>>SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'a%';

The following SQL statement selects all customers with a City starting with "L", followed by any character, followed by "n", followed by any character, followed by "on":
>>>SELECT * FROM Customers
WHERE City LIKE 'L_n_on';


#IN:   ===========================================================================================
>>>SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...); 

>>>SELECT column_name(s)
FROM table_name
WHERE column_name IN (SELECT STATEMENT); 

>>>SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');

>>>SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');

The following SQL statement selects all customers that are from the same countries as the suppliers:
>>>SELECT * FROM Customers
WHERE Country IN (SELECT Country FROM Suppliers);



#Between:=========================================================================================
>>>
SELECT column_name(s)
FROM table_name
WHERE column_name BETWEEN value1 AND value2; 

>>>SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;

>>>SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID NOT IN (1,2,3);

>>>SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;


#Alias:(AS) ============================================================================================
>>>SELECT column_name AS alias_name
FROM table_name;

>>>SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers; 

 The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):
 
 >>>SELECT CustomerName, CONCAT_WS(', ', Address, PostalCode, City, Country) AS Address
FROM Customers; 

The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):
#with alias: -------------
>>>SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;

#without alias: ---------
>>>SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;


#Union: set operation=================================================================================
The UNION operator is used to combine the result-set of two or more SELECT statements.

    Every SELECT statement within UNION must have the same number of columns
    The columns must also have similar data types
    The columns in every SELECT statement must also be in the same order
    
>>>SELECT column_name(s) FROM table1
UNION
SELECT column_name(s) FROM table2; 


The UNION operator selects only distinct values by default. To allow duplicate values, use UNION ALL:
>>>SELECT column_name(s) FROM table1
UNION ALL
SELECT column_name(s) FROM table2; 

#customer and supplier table have same number of column with Distict value: 
>>>SELECT City FROM Customers
UNION
SELECT City FROM Suppliers
ORDER BY City;

#The following SQL statement returns the cities (duplicate values also) from both the "Customers" and the "Suppliers" table:
>>>SELECT City FROM Customers
UNION ALL
SELECT City FROM Suppliers
ORDER BY City;



The following SQL statement returns the German cities (only distinct values) from both the "Customers" and the "Suppliers" table:
>>>SELECT City, Country FROM Customers
WHERE Country='Germany'
UNION
SELECT City, Country FROM Suppliers
WHERE Country='Germany'
ORDER BY City;
